/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SearchLayoutRouteImport } from './routes/_search-layout'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SplatIndexRouteImport } from './routes/$/index'
import { Route as ProductProductIdRouteImport } from './routes/product/$productId'
import { Route as SearchLayoutSearchIndexRouteImport } from './routes/_search-layout/search/index'
import { Route as SearchLayoutSearchCollectionRouteImport } from './routes/_search-layout/search/$collection'

const SearchLayoutRoute = SearchLayoutRouteImport.update({
  id: '/_search-layout',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SplatIndexRoute = SplatIndexRouteImport.update({
  id: '/$/',
  path: '/$/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductProductIdRoute = ProductProductIdRouteImport.update({
  id: '/product/$productId',
  path: '/product/$productId',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchLayoutSearchIndexRoute = SearchLayoutSearchIndexRouteImport.update({
  id: '/search/',
  path: '/search/',
  getParentRoute: () => SearchLayoutRoute,
} as any)
const SearchLayoutSearchCollectionRoute =
  SearchLayoutSearchCollectionRouteImport.update({
    id: '/search/$collection',
    path: '/search/$collection',
    getParentRoute: () => SearchLayoutRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/product/$productId': typeof ProductProductIdRoute
  '/$': typeof SplatIndexRoute
  '/search/$collection': typeof SearchLayoutSearchCollectionRoute
  '/search': typeof SearchLayoutSearchIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/product/$productId': typeof ProductProductIdRoute
  '/$': typeof SplatIndexRoute
  '/search/$collection': typeof SearchLayoutSearchCollectionRoute
  '/search': typeof SearchLayoutSearchIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_search-layout': typeof SearchLayoutRouteWithChildren
  '/product/$productId': typeof ProductProductIdRoute
  '/$/': typeof SplatIndexRoute
  '/_search-layout/search/$collection': typeof SearchLayoutSearchCollectionRoute
  '/_search-layout/search/': typeof SearchLayoutSearchIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/product/$productId'
    | '/$'
    | '/search/$collection'
    | '/search'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/product/$productId' | '/$' | '/search/$collection' | '/search'
  id:
    | '__root__'
    | '/'
    | '/_search-layout'
    | '/product/$productId'
    | '/$/'
    | '/_search-layout/search/$collection'
    | '/_search-layout/search/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SearchLayoutRoute: typeof SearchLayoutRouteWithChildren
  ProductProductIdRoute: typeof ProductProductIdRoute
  SplatIndexRoute: typeof SplatIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_search-layout': {
      id: '/_search-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof SearchLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$/': {
      id: '/$/'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof SplatIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/product/$productId': {
      id: '/product/$productId'
      path: '/product/$productId'
      fullPath: '/product/$productId'
      preLoaderRoute: typeof ProductProductIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_search-layout/search/': {
      id: '/_search-layout/search/'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchLayoutSearchIndexRouteImport
      parentRoute: typeof SearchLayoutRoute
    }
    '/_search-layout/search/$collection': {
      id: '/_search-layout/search/$collection'
      path: '/search/$collection'
      fullPath: '/search/$collection'
      preLoaderRoute: typeof SearchLayoutSearchCollectionRouteImport
      parentRoute: typeof SearchLayoutRoute
    }
  }
}

interface SearchLayoutRouteChildren {
  SearchLayoutSearchCollectionRoute: typeof SearchLayoutSearchCollectionRoute
  SearchLayoutSearchIndexRoute: typeof SearchLayoutSearchIndexRoute
}

const SearchLayoutRouteChildren: SearchLayoutRouteChildren = {
  SearchLayoutSearchCollectionRoute: SearchLayoutSearchCollectionRoute,
  SearchLayoutSearchIndexRoute: SearchLayoutSearchIndexRoute,
}

const SearchLayoutRouteWithChildren = SearchLayoutRoute._addFileChildren(
  SearchLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SearchLayoutRoute: SearchLayoutRouteWithChildren,
  ProductProductIdRoute: ProductProductIdRoute,
  SplatIndexRoute: SplatIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
